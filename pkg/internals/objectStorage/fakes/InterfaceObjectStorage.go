// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"io"
	"sync"

	"github.com/gin-gonic/gin"
	"github.com/singhmeghna79/homework-object-storage/pkg/internals/objectStorage"
)

type InterfaceObjectStorage struct {
	GetObjectStub        func(*gin.Context, string) (io.ReadCloser, error)
	getObjectMutex       sync.RWMutex
	getObjectArgsForCall []struct {
		arg1 *gin.Context
		arg2 string
	}
	getObjectReturns struct {
		result1 io.ReadCloser
		result2 error
	}
	getObjectReturnsOnCall map[int]struct {
		result1 io.ReadCloser
		result2 error
	}
	PutObjectStub        func(*gin.Context, string, io.Reader, int64) error
	putObjectMutex       sync.RWMutex
	putObjectArgsForCall []struct {
		arg1 *gin.Context
		arg2 string
		arg3 io.Reader
		arg4 int64
	}
	putObjectReturns struct {
		result1 error
	}
	putObjectReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *InterfaceObjectStorage) GetObject(arg1 *gin.Context, arg2 string) (io.ReadCloser, error) {
	fake.getObjectMutex.Lock()
	ret, specificReturn := fake.getObjectReturnsOnCall[len(fake.getObjectArgsForCall)]
	fake.getObjectArgsForCall = append(fake.getObjectArgsForCall, struct {
		arg1 *gin.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetObjectStub
	fakeReturns := fake.getObjectReturns
	fake.recordInvocation("GetObject", []interface{}{arg1, arg2})
	fake.getObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *InterfaceObjectStorage) GetObjectCallCount() int {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	return len(fake.getObjectArgsForCall)
}

func (fake *InterfaceObjectStorage) GetObjectCalls(stub func(*gin.Context, string) (io.ReadCloser, error)) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = stub
}

func (fake *InterfaceObjectStorage) GetObjectArgsForCall(i int) (*gin.Context, string) {
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	argsForCall := fake.getObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *InterfaceObjectStorage) GetObjectReturns(result1 io.ReadCloser, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	fake.getObjectReturns = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *InterfaceObjectStorage) GetObjectReturnsOnCall(i int, result1 io.ReadCloser, result2 error) {
	fake.getObjectMutex.Lock()
	defer fake.getObjectMutex.Unlock()
	fake.GetObjectStub = nil
	if fake.getObjectReturnsOnCall == nil {
		fake.getObjectReturnsOnCall = make(map[int]struct {
			result1 io.ReadCloser
			result2 error
		})
	}
	fake.getObjectReturnsOnCall[i] = struct {
		result1 io.ReadCloser
		result2 error
	}{result1, result2}
}

func (fake *InterfaceObjectStorage) PutObject(arg1 *gin.Context, arg2 string, arg3 io.Reader, arg4 int64) error {
	fake.putObjectMutex.Lock()
	ret, specificReturn := fake.putObjectReturnsOnCall[len(fake.putObjectArgsForCall)]
	fake.putObjectArgsForCall = append(fake.putObjectArgsForCall, struct {
		arg1 *gin.Context
		arg2 string
		arg3 io.Reader
		arg4 int64
	}{arg1, arg2, arg3, arg4})
	stub := fake.PutObjectStub
	fakeReturns := fake.putObjectReturns
	fake.recordInvocation("PutObject", []interface{}{arg1, arg2, arg3, arg4})
	fake.putObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *InterfaceObjectStorage) PutObjectCallCount() int {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	return len(fake.putObjectArgsForCall)
}

func (fake *InterfaceObjectStorage) PutObjectCalls(stub func(*gin.Context, string, io.Reader, int64) error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = stub
}

func (fake *InterfaceObjectStorage) PutObjectArgsForCall(i int) (*gin.Context, string, io.Reader, int64) {
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	argsForCall := fake.putObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *InterfaceObjectStorage) PutObjectReturns(result1 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	fake.putObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *InterfaceObjectStorage) PutObjectReturnsOnCall(i int, result1 error) {
	fake.putObjectMutex.Lock()
	defer fake.putObjectMutex.Unlock()
	fake.PutObjectStub = nil
	if fake.putObjectReturnsOnCall == nil {
		fake.putObjectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.putObjectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *InterfaceObjectStorage) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getObjectMutex.RLock()
	defer fake.getObjectMutex.RUnlock()
	fake.putObjectMutex.RLock()
	defer fake.putObjectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *InterfaceObjectStorage) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ objectStorage.ObjectStorage = new(InterfaceObjectStorage)
